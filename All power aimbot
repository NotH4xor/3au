local plr, uis, rs, cg = game.Players.LocalPlayer, game:GetService("UserInputService"), game:GetService("RunService"), game:GetService("CoreGui")
local hasBall, readyToShoot, toggleOn, CurrentMessage, NotifyGui = false, false, true, nil, nil

-- Notification GUI setup
if not NotifyGui then
    NotifyGui = Instance.new("ScreenGui", cg)
    NotifyGui.Name = "NotifyGui"
    local template = Instance.new("TextLabel", NotifyGui)
    template.AnchorPoint = Vector2.new(0.5, 0.5)
    template.BackgroundTransparency = 1
    template.Position = UDim2.new(0.5, 0, 0.9, 0)
    template.Size = UDim2.new(0.8, 0, 0.1, 0)
    template.Font = Enum.Font.Code
    template.TextSize = 30
    template.TextWrapped = true
    template.Text = ""
    _G.Template = template
end

local function notify(msg, clr)
    if CurrentMessage then CurrentMessage:Destroy() end
    CurrentMessage = _G.Template:Clone()
    CurrentMessage.Text, CurrentMessage.TextColor3, CurrentMessage.Parent = msg, clr, NotifyGui
    task.spawn(function()
        task.wait(2)
        if CurrentMessage then
            CurrentMessage:Destroy()
            CurrentMessage = nil
        end
    end)
end

local function showToggleMsg()
    notify(toggleOn and "Toggle ON" or "Toggle OFF", toggleOn and Color3.fromRGB(25, 255, 25) or Color3.fromRGB(255, 25, 25))
end

local a, b = game.Players.LocalPlayer, game:GetService("RunService")
local c = a:WaitForChild("PlayerGui", 9e9).Power.PowerFrame.Power
local d = a.Character.E_V.AddPower
local e, f, g = "75", {}, nil
local h = true

for i, j in ipairs(workspace:GetDescendants()) do
    if j:IsA("BasePart") and j.Name == "Lol" and j.Parent.Name == "Rim" then
        f[#f+1] = j
    end
end

local k = tick()
local function l()
    if tick() - k > 0.5 then
        local m, n = nil, math.huge
        local o = a.Character.Torso.Position
        for i, p in ipairs(f) do
            local q = (o - p.Position).Magnitude
            if q < n then
                m, n = p, q
end
        end
        g = m
        k = tick()
    end
    return g
end

local function r(q)
    local s = { ["75"] = 5.61, ["80"] = 4.22, ["85"] = 5.64, ["90"] = 5.05 }
    return Vector3.new(0, 43 + math.clamp(q / 15, s[e] - 0.05, s[e]), 0)
end

local t = tick()
local u = Vector3.new()
local function v(p)
    if tick() - t > 0.1 then
        u = Vector3.new(a.Character.Humanoid.MoveDirection.X * 1.5, 0, a.Character.Humanoid.MoveDirection.Z * 1.5)
        t = tick()
    end
    local w = (a.Character.Torso.Position - p.Position).Magnitude
    return p.Position + r(w) - u
end

local function shootBall()
    if hasBall and readyToShoot and toggleOn then
        local p, A = l(), nil
        A = v(p)
        local B = (A - a.Character.Head.Position).Unit
        local C = a.Character.PrimaryPart.Position + B * 3.8
        if C.Y - a.Character.PrimaryPart.Position.Y < 4 then
            C = a.Character.PrimaryPart.Position + B * 4
        end
        a.Character.Basketball.shoot_event:FireServer(A, C, "\240\159\148\165\240\159\148\165")
        readyToShoot = false
    end
end

local function handleJumped()
    if toggleOn then
        task.wait(0.225)
        shootBall()
    end
end

local function handleMovement()
    if toggleOn then
        hasBall = a.Character:FindFirstChild("Basketball")
        if hasBall then
            a.Character.Humanoid:MoveTo(a.Character.Torso.Position)
        end
    end
end

local function handleInput(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
        local key = input.KeyCode.Name
        if key == "Space" and input.UserInputState == Enum.UserInputState.Begin then
            readyToShoot, a.Character.Humanoid.Jump = true, true
        elseif key == "V" and input.UserInputState == Enum.UserInputState.Begin then
            toggleOn = not toggleOn
            showToggleMsg()
            manageToggle()
        end
    end
end

local function updatePower(targetPower)
while toggleOn and wait() do
        if not a.Character or not a.Character:FindFirstChild("Basketball") or not getgenv().AutoPower then
            break
        end
        local currentPower = tonumber(c.Text)
        if currentPower ~= targetPower then
            d:FireServer(currentPower < targetPower and 5 or -5)
            wait(0.2)
        else
            break
        end
    end
end

local function ensurePower()
    if toggleOn then
        local p, F, w = l(), tonumber(c.Text), nil
        w = (a.Character.Torso.Position - p.Position).Magnitude
        local I = math.floor(w)
        if I == 57 and F ~= 75 then
            updatePower(75)
        elseif I == 64 and F ~= 80 then
            updatePower(80)
        elseif I == 70 and F ~= 85 then
            updatePower(85)
        elseif I == 76 and F ~= 90 then
            updatePower(90)
        end
    end
end

local jumpConn, movementConn, inputConn, renderConn

local function connectEvents()
    jumpConn = plr.Character.Humanoid.Jumping:Connect(handleJumped)
    movementConn = rs.Stepped:Connect(handleMovement)
    renderConn = rs.Stepped:Connect(ensurePower)
    inputConn = uis.InputBegan:Connect(handleInput)
end

local function disconnectEvents()
    if jumpConn then jumpConn:Disconnect() end
    if movementConn then movementConn:Disconnect() end
    if renderConn then renderConn:Disconnect() end
    if inputConn then inputConn:Disconnect() end
end

local function manageToggle()
    if toggleOn then
        connectEvents()
    else
        disconnectEvents()
    end
end

plr.CharacterAdded:Connect(function(J)
    plr.Character = J
    c = plr:WaitForChild("PlayerGui", 9e9).Power.PowerFrame.Power
    d = J:WaitForChild("AddPower")
    disconnectEvents()
    connectEvents()
end)

plr.Character.ChildAdded:Connect(function(K)
    if K:IsA("Tool") and K.Name == "Basketball" then
        h = false
        task.wait(1)
        h = true
    end
end)

connectEvents()
showToggleMsg()
