-- Keybind F
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local player = Players.LocalPlayer
local maxDistance = 10
local checkInterval = 0.5
local isActive = false
local CurrentMessage, NotifyGui = nil, nil

-- Notification GUI setup
if not NotifyGui then
    NotifyGui = Instance.new("ScreenGui", CoreGui)
    NotifyGui.Name = "NotifyGui"
    local template = Instance.new("TextLabel", NotifyGui)
    template.AnchorPoint = Vector2.new(0.5, 0.5)
    template.BackgroundTransparency = 1
    template.Position = UDim2.new(0.5, 0, 0.9, 0)
    template.Size = UDim2.new(0.8, 0, 0.1, 0)
    template.Font = Enum.Font.Code
    template.TextSize = 30
    template.TextWrapped = true
    template.Text = ""
    _G.Template = template
end

local function notify(msg, clr)
    if CurrentMessage then CurrentMessage:Destroy() end
    CurrentMessage = _G.Template:Clone()
    CurrentMessage.Text, CurrentMessage.TextColor3, CurrentMessage.Parent = msg, clr, NotifyGui
    task.spawn(function()
        task.wait(2)
        if CurrentMessage then
            CurrentMessage:Destroy()
            CurrentMessage = nil
        end
    end)
end

local function showToggleMsg()
    notify(isActive and "MAG ON" or "MAG OFF", isActive and Color3.fromRGB(25, 255, 25) or Color3.fromRGB(255, 25, 25))
end

local function handleInput(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.F then
        if input.UserInputState == Enum.UserInputState.Begin then
            isActive = not isActive
            showToggleMsg()
        end
    end
end

UserInputService.InputBegan:Connect(handleInput)

local function getClosestTouchInterestPart(player, maxDistance)
    local character = player.Character
    if not character then return end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local closestPart = nil
    local shortestDistance = maxDistance

    for _, obj in pairs(workspace.Basketball:GetDescendants()) do
        if obj:IsA("BasePart") and obj:FindFirstChildOfClass("TouchTransmitter") then
            local distance = (obj.Position - rootPart.Position).Magnitude
            if distance < shortestDistance then
                closestPart = obj
                shortestDistance = distance
            end
        end
    end

    return closestPart
end

local function fireTouchInterest(part)
    local character = player.Character
    if not character then return end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    local touchTransmitter = part:FindFirstChildOfClass("TouchTransmitter")
    if touchTransmitter then
        print("Firing touch interest for part:", part.Name)
        firetouchinterest(rootPart, part, 0)
        wait(0.2)
        firetouchinterest(rootPart, part, 1)
    else
        print("No TouchTransmitter found in part:", part.Name)
    end
end

local function checkAndFireTouchInterest()
    if isActive then
        print("Toggle is ON, running function")
        local partWithTouchInterest = getClosestTouchInterestPart(player, maxDistance)
        if partWithTouchInterest then
            fireTouchInterest(partWithTouchInterest)
        else
            print("No part found within distance:", maxDistance)
        end
    else
        print("Toggle is OFF, function will not run")
    end
end

RunService.Stepped:Connect(checkAndFireTouchInterest)

showToggleMsg()
